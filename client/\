// client/src/pages/Community.js
import { useState, useEffect, useCallback } from "react";
import {
  Box,
  Container,
  SimpleGrid,
  Input,
  InputGroup,
  InputLeftElement,
  VStack,
  Text,
  useToast,
  Spinner,
  Center,
} from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";
import UserCard from "../components/UserCard";
import PageTitle from "../components/PageTitle";
import { useAuth } from "../context/AuthContext";
import { userAPI } from "../services/api";

const Community = () => {
  const [users, setUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(true);
  const toast = useToast();
  const { needsRefresh, setNeedsRefresh } = useState(true);

  const { user: currentUser, isAuthenticated } = useAuth();
  const fetchUsers = useCallback(async () => {
    if (!isAuthenticated) return;

    try {
      setLoading(true);
      const response = await userAPI.getCommunityUsers();
      setUsers(response.data);

      // If this is the initial load, set a timeout to fetch again
      if (initialLoad) {
        console.log("Initial load completed, scheduling refresh...");
        setTimeout(async () => {
          console.log("Performing refresh fetch...");
          try {
            const refreshResponse = await userAPI.getCommunityUsers();
            setUsers(refreshResponse.data);
            console.log("Refresh fetch completed");
          } catch (error) {
            console.error("Refresh fetch error:", error);
          }
          setInitialLoad(false);
        }, 1000);
      }
    } catch (error) {
      console.error("Community fetch error:", error);
      toast({
        title: "Error",
        description:
          error.response?.data?.error || "Failed to load community members",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, initialLoad, toast]);

  // Initial fetch on component mount
  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleFollow = async (userId) => {
    try {
      await userAPI.follow(userId);

      // Optimistically update local state
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user._id === userId ? { ...user, isFollowing: true } : user
        )
      );

      // Fetch fresh data after a short delay
      setTimeout(() => {
        fetchUsers();
      }, 500);

      toast({
        title: "Success",
        description: "Successfully followed user",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Follow error:", error);
      // Revert local state on error
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user._id === userId ? { ...user, isFollowing: false } : user
        )
      );
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to follow user",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleUnfollow = async (userId) => {
    try {
      await userAPI.unfollow(userId);

      // Optimistically update local state
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user._id === userId ? { ...user, isFollowing: false } : user
        )
      );

      // Fetch fresh data after a short delay
      setTimeout(() => {
        fetchUsers();
      }, 500);

      toast({
        title: "Success",
        description: "Successfully unfollowed user",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Unfollow error:", error);
      // Revert local state on error
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user._id === userId ? { ...user, isFollowing: true } : user
        )
      );
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to unfollow user",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // Add console logs to track component updates
  console.log(
    "Community component render, users:",
    users.map((u) => ({
      username: u.username,
      isFollowing: u.isFollowing,
    }))
  );
  return (
    <Box py={8}>
      <Container maxW="container.xl" fontFamily="Montserrat">
        <VStack spacing={8}>
          <PageTitle title="Recipe Community" />

          <InputGroup maxW="600px" fontFamily="Montserrat">
            <InputLeftElement pointerEvents="none">
              <SearchIcon color="gray.400" />
            </InputLeftElement>
            <Input
              name="search"
              id="search"
              placeholder="Search community members..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              size="lg"
              borderRadius="full"
            />
          </InputGroup>

          {filteredUsers.length > 0 ? (
            <SimpleGrid
              columns={{ base: 1, sm: 2, md: 3, lg: 4 }}
              spacing={6}
              w="full"
            >
              {filteredUsers.map((user) => (
                <UserCard
                  key={user._id}
                  user={user}
                  onFollow={handleFollow}
                  onUnfollow={handleUnfollow}
                  isAuthenticated={isAuthenticated}
                  currentUser={currentUser}
                />
              ))}
            </SimpleGrid>
          ) : (
            <Text>No users found matching your search.</Text>
          )}
        </VStack>
      </Container>
    </Box>
  );
};

export default Community;
